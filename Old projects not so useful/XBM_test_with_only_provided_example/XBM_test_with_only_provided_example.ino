/*

  XBM.pde
  
  U8glib Example: Demonstrate bitmap (XBM) buttons 

  m2tklib = Mini Interative Interface Toolkit Library

  >>> Before compiling: Please remove comment from the constructor of the 
  >>> connected graphics display (see below).

  Copyright (C) 2012  olikraus@gmail.com

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

  SCL (SPI Clock)   Pin 13
  SI (MOSI)         Pin 11
  CS (Chip Select)  Pin 10
  MISO (Pin 12) is not used, but can not be reused as generic I/O
  
*/

#include "U8glib.h"
#include "M2tk.h"
#include "utility/m2ghu8g.h"

U8GLIB_ST7920_128X64_4X u8g(17, 15, 16);  // SPI Com: SCK = en = 18, MOSI = rw = 16, CS = di = 17

static char z_homing_28_bits[] U8G_PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00,
   0x00, 0x06, 0x03, 0x00, 0x00, 0x03, 0x06, 0x00, 0x80, 0x01, 0x0c, 0x00,
   0xc0, 0x00, 0x18, 0x00, 0x60, 0x00, 0x30, 0x00, 0x30, 0x07, 0x67, 0x00,
   0x38, 0x05, 0xe5, 0x00, 0x20, 0x07, 0x27, 0x00, 0x20, 0x00, 0x20, 0x00,
   0x20, 0x00, 0x20, 0x00, 0x20, 0xf8, 0x20, 0x00, 0x20, 0x88, 0x20, 0x00,
   0x20, 0x88, 0x20, 0x00, 0x20, 0x88, 0x20, 0x00, 0x20, 0x88, 0x20, 0x00,
   0xe0, 0x8f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00,
   0x90, 0x60, 0xa2, 0x03, 0x88, 0x93, 0xb6, 0x00, 0x84, 0x94, 0xaa, 0x01,
   0x82, 0x94, 0xa2, 0x00, 0x9e, 0x64, 0xa2, 0x03, 0x00, 0x00, 0x00, 0x00 };

static char pre_approach_28_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0xff, 0x47, 0x00,
   0x80, 0xf0, 0x47, 0x00, 0x80, 0x00, 0x44, 0x00, 0x80, 0x00, 0x44, 0x00,
   0x80, 0x00, 0x44, 0x00, 0x80, 0x00, 0x40, 0x00, 0x80, 0x00, 0x40, 0x00,
   0x80, 0x00, 0xf0, 0x01, 0x80, 0x00, 0xe0, 0x00, 0x80, 0x00, 0x40, 0x00,
   0xc0, 0x01, 0x00, 0x00, 0xc0, 0x81, 0x20, 0x00, 0xc0, 0x81, 0x20, 0x00,
   0xc0, 0x81, 0x3f, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x1c, 0x80, 0x01, 0x00, 0x24, 0x40, 0x02, 0x00,
   0x24, 0x4e, 0x02, 0x00, 0x1c, 0xc2, 0x9b, 0x01, 0xc4, 0x46, 0xaa, 0x02,
   0x44, 0x42, 0x9a, 0x01, 0x44, 0x4e, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00 };

static char approach_28_bits[] U8G_PROGMEM = {
   0x00, 0x03, 0x00, 0x00, 0xa0, 0x14, 0x00, 0x00, 0xa0, 0x90, 0x89, 0x00,
   0x20, 0x53, 0x8a, 0x00, 0x20, 0x54, 0xaa, 0x00, 0xa0, 0x54, 0xaa, 0x00,
   0x20, 0x93, 0x71, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x81, 0x00,
   0x20, 0xfc, 0x81, 0x00, 0x20, 0x00, 0x81, 0x00, 0x20, 0x00, 0x81, 0x00,
   0x70, 0x00, 0xe1, 0x03, 0x70, 0x20, 0xc8, 0x01, 0x70, 0x20, 0x88, 0x00,
   0x70, 0xe0, 0x0f, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
   0x24, 0x00, 0x00, 0x00, 0xbc, 0x99, 0x99, 0x02, 0xa4, 0xaa, 0x24, 0x01,
   0xa4, 0x99, 0x24, 0x01, 0xa4, 0x88, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00 };

  static char retract_28_bits[] U8G_PROGMEM = {
   0x00, 0x03, 0x00, 0x00, 0xa0, 0x14, 0x00, 0x00, 0xa0, 0x90, 0x89, 0x00,
   0x20, 0x53, 0x8a, 0x00, 0x20, 0x54, 0xaa, 0x00, 0xa0, 0x54, 0xaa, 0x00,
   0x20, 0x93, 0x71, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x81, 0x00,
   0x20, 0xfc, 0xc1, 0x01, 0x20, 0x00, 0xe1, 0x03, 0x20, 0x00, 0x81, 0x00,
   0x70, 0x00, 0x81, 0x00, 0x70, 0x20, 0x88, 0x00, 0x70, 0x20, 0x88, 0x00,
   0x70, 0xe0, 0x0f, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
   0xd2, 0x05, 0x02, 0x01, 0x4e, 0x6c, 0x65, 0x03, 0xd2, 0x24, 0x17, 0x01,
   0x52, 0x24, 0x15, 0x01, 0xd2, 0x2d, 0x65, 0x03, 0x00, 0x00, 0x00, 0x00 };

  static char general_movement_28_bits[] U8G_PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00,
   0x20, 0x00, 0xe0, 0x00, 0x20, 0x00, 0xf0, 0x01, 0xe0, 0xff, 0x41, 0x00,
   0x20, 0xfc, 0x41, 0x00, 0x20, 0x00, 0x41, 0x00, 0x20, 0x00, 0xf1, 0x01,
   0x20, 0x00, 0xe1, 0x00, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00,
   0x70, 0x00, 0x00, 0x00, 0x70, 0x20, 0x08, 0x00, 0x70, 0x20, 0x08, 0x00,
   0x70, 0xe0, 0x0f, 0x00, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
   0xf8, 0x4c, 0x74, 0x00, 0xa8, 0x52, 0x14, 0x00, 0x88, 0x52, 0x34, 0x00,
   0x88, 0x92, 0x12, 0x00, 0x88, 0x0c, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00 };

  static char configuration_28_bits[] U8G_PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x0f, 0x00,
   0x20, 0x00, 0x10, 0x00, 0x10, 0x08, 0x20, 0x00, 0x10, 0x61, 0xa0, 0x01,
   0x11, 0x90, 0x64, 0x02, 0x1e, 0x10, 0x21, 0x02, 0x10, 0x12, 0x1e, 0x02,
   0x17, 0x10, 0x00, 0x02, 0x1c, 0x0c, 0x81, 0x04, 0x90, 0x88, 0xd1, 0x04,
   0x10, 0x0a, 0x00, 0x04, 0x18, 0x09, 0x49, 0x04, 0x1e, 0x10, 0x7f, 0x02,
   0x31, 0x20, 0x00, 0x01, 0xe9, 0xff, 0xff, 0x00, 0x47, 0x22, 0x25, 0x00,
   0x80, 0xc3, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
   0x82, 0x29, 0xd2, 0x03, 0x42, 0x5a, 0x45, 0x00, 0x42, 0x4a, 0x51, 0x03,
   0x42, 0x4a, 0x53, 0x02, 0x9c, 0x49, 0xd1, 0x03, 0x00, 0x00, 0x00, 0x00 };

  
M2_EXTERN_ALIGN(el_top);	// forward declaration of the top level element
M2_EXTERN_ALIGN(el_z_homing_course);
M2_EXTERN_LABEL(el_z_homing_course_label);
M2_EXTERN_HLIST(el_preapp_course);
M2_EXTERN_HLIST(el_app_course);


//------------------------------------------------------------------------------------------------

/* ===== Home first Message ===== */

M2_LABEL(el_z_home_first_label, NULL, "Home First");
M2_ALIGN(el_z_home_first, NULL, &el_z_home_first_label);  

//------------------------------------------------------------------------------------------------

/* ===== Z homing menu ===== */

void zh_cb(m2_el_fnarg_p fnarg){
    m2_SetRoot(&el_z_homing_course_label);
}

    /* ______ Z homing selection menu ______ */
M2_LABEL(el_z_homing_label, NULL, "Fancy homming Z?");
M2_BUTTON(el_z_homing_yes, "f4", " Yes, please ", zh_cb);
M2_ROOT(el_z_homing_no, "f4", " No, thanks ", &el_top);
M2_LIST(list_z_homing) = { &el_z_homing_label, &el_z_homing_yes, &el_z_homing_no };
M2_VLIST(el_z_homing_vl, NULL, list_z_homing);
M2_ALIGN(el_z_homing, "W64H64", &el_z_homing_vl);  

    /* ______ Z homing in course menu ______ */

M2_LABEL(el_z_homing_course_label, NULL, "Z homing...");

    /* ______ Z homing successful ______ */

M2_LABEL(el_z_homing_success_label, NULL, "Z homing successful");

    /* ______ Z homing failed ______ */

M2_LABEL(el_z_homing_fail_label, NULL, "Z homing failed");

//------------------------------------------------------------------------------------------------

/* ===== Pre approach menu ===== */

uint8_t preapph = 50;
uint8_t height = 115;

void pr_app(m2_el_fnarg_p fnarg){
  //add if it is homed proceed but if it is not go to main menu again
  m2_SetRoot(&el_preapp_course);  // go to pre approach function
}

    /* ______ Set pre approach hight menu ______ */

M2_LABEL(el_preapph_input_label1, NULL, "Pre approach ");
M2_LABEL(el_preapph_input_label2, NULL, "");
M2_LABEL(el_preapph_input_label3, NULL, "Height = ");
M2_U8NUM(el_preapph_input_u8, "c3", 0, 115, &preapph);
M2_BUTTON(el_preapph_input_ok, "", "Ok", pr_app);
M2_ROOT(el_preapph_input_back, "", "Back", &el_top);
M2_LIST(list_preapph_input) = { 
  &el_preapph_input_label1,&el_preapph_input_label2,
  &el_preapph_input_label3, &el_preapph_input_u8,
  &el_preapph_input_ok, &el_preapph_input_back
  };
M2_GRIDLIST(el_preapph_input_g1, "c2", list_preapph_input);
M2_ALIGN(el_preapph_input, NULL, &el_preapph_input_g1);

    /* ______ Pre approach in course menu ______ */

M2_LABEL(el_preapp_course_label, NULL, "Pre approach...  ");
M2_U8NUM(el_preapp_course_label_height, "c3r1",0,115, &height);
M2_LIST(el_preapp_list) = { &el_preapp_course_label, &el_preapp_course_label_height };
M2_HLIST(el_preapp_course, NULL, el_preapp_list);

//------------------------------------------------------------------------------------------------

/* ===== Approach menu ===== */

uint32_t feedrate = 1000;

void app(m2_el_fnarg_p fnarg){
  //add if it is homed proceed but if it is not go to main menu again
  m2_SetRoot(&el_app_course);  // go to approach function
}

    /* ______ Set approach feedrate menu ______ */

M2_LABEL(el_appf_input_label1, NULL, "Approach ");
M2_LABEL(el_appf_input_label2, NULL, "");
M2_LABEL(el_appf_input_label3, NULL, "Feedrate = ");
M2_U32NUM(el_appf_input_u32, "a1c4", &feedrate);
M2_BUTTON(el_appf_input_ok, "", "Ok", app);
M2_ROOT(el_appf_input_back, "", "Back", &el_top);
M2_LIST(list_appf_input) = { 
  &el_appf_input_label1,&el_appf_input_label2,
  &el_appf_input_label3, &el_appf_input_u32,
  &el_appf_input_ok, &el_appf_input_back
  };
M2_GRIDLIST(el_appf_input_g1, "c2", list_appf_input);
M2_ALIGN(el_appf_input, NULL, &el_appf_input_g1);

    /* ______ Approach in course menu ______ */

M2_LABEL(el_app_course_label, NULL, "Approaching...  ");
M2_U8NUM(el_app_course_label_height, "c3r1",0,115, &height);
M2_LIST(el_app_list) = { &el_app_course_label, &el_app_course_label_height };
M2_HLIST(el_app_course, NULL, el_app_list);

    /* ______ Approach successful ______ */

M2_LABEL(el_approach_success_label, NULL, "Approach successful");

    /* ______ Approach failed ______ */

M2_LABEL(el_approach_fail_label, NULL, "Approach failed");

  
// main menu with two icons as buttons  
// w30h30: Define visible size of the icon, center icon within this frame
// 28, 28: Informs m2tklib about the actual size of the icon
M2_XBMROOTP(el_xbm_z_homming, "w32h29", 27, 27, z_homing_28_bits, &el_z_homing);
M2_XBMROOTP(el_xbm_pre_approach,  "w32h29", 27, 27, pre_approach_28_bits, &el_preapph_input);
M2_XBMROOTP(el_xbm_approach,  "w32h29",  27, 27, approach_28_bits, &el_appf_input);
M2_XBMROOTP(el_xbm_retract,  "w32h29",  27, 27, retract_28_bits, &el_top);
M2_XBMROOTP(el_xbm_general_movement,  "w32h29",  27, 27, general_movement_28_bits, &el_top);
M2_XBMROOTP(el_xbm_configuration,  "w32h29",  27, 27, configuration_28_bits, &el_top);
M2_LIST(el_xbm_list) = {
  &el_xbm_z_homming, &el_xbm_pre_approach, &el_xbm_approach,
  &el_xbm_retract, &el_xbm_general_movement, &el_xbm_configuration,
  };
M2_GRIDLIST(el_xbm_hlist, "c3", el_xbm_list);
M2_ALIGN(el_top, NULL, &el_xbm_hlist);




M2tk m2(&el_top, m2_es_arduino_rotary_encoder, m2_eh_4bd, m2_gh_u8g_ffs);

// U8glib draw procedure: Just call the M2tklib draw procedure
void draw(void) {
    m2.draw();
}

// Arduino setup procedure (called only once)
void setup() {
  // Connect u8glib with m2tklib
  m2_SetU8g(u8g.getU8g(), m2_u8g_box_icon);

  // Assign u8g font to index 0
  m2.setFont(0, u8g_font_6x13);

  // Setup keys
  m2.setPin(M2_KEY_SELECT, 4);
  m2.setPin(M2_KEY_ROT_ENC_A, 3);
  m2.setPin(M2_KEY_ROT_ENC_B, 2);
}

// Arduino loop procedure
void loop() {
  height = millis()/1000;
  m2.checkKey();
  if ( m2.handleKey() || newFrame() ) {
    u8g.firstPage();  
    do {
      draw();
    } while( u8g.nextPage() );
  }
}
